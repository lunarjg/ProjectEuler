import math

def primes_below(n) :
  if n < 3 :
    return {}
  elif n == 3 :
    return {2}
  elif n == 4 :
    return {2, 3}
  else :
    nums = set([2] + [2*x + 1 for x in range(1, n // 2)])
    k = 1
    smallest_prime = list(nums)[k]
    while 2 * smallest_prime < n :
      smallest_prime_multiples = set(smallest_prime * x for x in range(2, n // smallest_prime + 1))
      nums -= smallest_prime_multiples
      k += 1
      smallest_prime = list(nums)[k]
    return nums

def is_prime(n) :
  if n < 0 :
    return False
  elif any(n % k == 0 for k in primes_below(math.isqrt(n) + 1)) == True :
    return False
  else :
    return True

def quadratic_prime(n, a, b) :
  return int(n ** 2 + a * n + b)

max = 0 
max_ab_product = 0
n = 0

for a in range(-999, 1000) : 
  for b in list(primes_below(1001)) + [-x for x in primes_below(1001)] :
    n = 0
    if quadratic_prime(n, a, b) > 0 :
      while is_prime(quadratic_prime(n, a, b)) == True :
        n += 1
      if n > max :
        max = n
        max_ab_product = a * b

print(max_ab_product)
