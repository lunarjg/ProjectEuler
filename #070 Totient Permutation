from numba import jit
from functools import cache
import math

def primes_below(n):
    sieve = [True] * n
    sieve[0:2] = [False, False]
    for i in range(2, int(n**0.5) + 1):
        if sieve[i]:
            for j in range(i*i, n, i):
                sieve[j] = False
    return set(i for i, is_prime in enumerate(sieve) if is_prime)

primes = sorted(primes_below(10000000))

@jit(nopython=True)
def phi(n) :
  if n == 0:
      return 0
  result = n
  i = 2
  while i * i <= n:
    if n % i == 0:
      while n % i == 0:
        n //= i
      result -= result // i
    i += 1
  if n > 1:
    result -= result // n
  return result

min_val = 1000
min_n = 0

for n in range(2,10000000) :
  if sorted([int(x) for x in str(n)]) == sorted([int(y) for y in str(phi(n))]) and n / phi(n) < min_val :
    min_val, min_n = n / phi(n), n
    print(min_val, min_n)

print(min_n)
