from functools import cache

@cache
def primes_below(n):
    sieve = [True] * n
    sieve[0:2] = [False, False]
    for i in range(2, int(n**0.5) + 1):
        if sieve[i]:
            for j in range(i*i, n, i):
                sieve[j] = False
    return set(i for i, is_prime in enumerate(sieve) if is_prime)

def n_th_layer_nums(n) :
  if n == 1 :
    return [1]
  else :
    a = (2*n -1) ** 2
    d = 2*(n-1)
    return [a-d, a-2*d, a-3*d]

def sum_layer_primes (n) :
  count = 0
  primes = primes_below((2*n -1) ** 2 - 2*(n-1) + 1)
  nums = []
  for k in range(1, n + 1) :
    nums += n_th_layer_nums(k)
  for num in nums :
    if num in primes :
      count += 1
  return count

ratio = 1
n = 2500

while True :
  print(n)
  if 10 * sum_layer_primes(n) < 4*(n-1) + 1 :
    print(n)
    break
  else : 
    n += 1
